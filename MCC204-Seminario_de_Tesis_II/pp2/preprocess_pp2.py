#!/usr/bin/python

# -*- coding: utf-8 -*-

import os
import pandas
import numpy
import matplotlib.pyplot as plt
import zipfile
#import geocoder
from unicodedata import normalize

from shapely.geometry import Point
from shapely.geometry.polygon import Polygon

scores_dir = "Qscores"
summary_dir = "Summaries"

# BB
country_city_dataset = [{"continent": "America",
                         "gps": [[72.1952458, -166.5527344],
                                 [67.5253735, -167.3437500],
                                 [65.0721301, -168.7060547],
                                 [63.1940184, -167.5195313],
                                 [58.2401635, -167.5634766],
                                 [47.8721440, -171.9140625],
                                 [19.3111434, -141.6796875],
                                 [-58.8137417, -68.9062500],
                                 [-54.1624340, -28.8281250],
                                 [14.6048472, -31.6406250],
                                 [54.9776137, -47.1093750],
                                 [62.2679226, -16.1718750],
                                 [71.3007929, -0.7031250],
                                 [83.1110710, -4.2187500],
                                 [84.8024737, -67.1484375],
                                 [82.8533823, -119.8828125],
                                 [75.9308854, -156.0937500]],
                         "cities":[
                              {
                              "country": "Brasil",
                              "city": "Rio de Janeiro",
                              "gps": [[-22.7533879, -43.9178467],
                                      [-23.2388224, -43.7200928],
                                      [-23.0847852, -42.8631592],
                                      [-22.4465719, -42.9867554]]
                              },
                              {
                              "country": "Brasil",
                              "city": "Sao Paolo",
                              "gps": [[-23.2842421, -46.9665527],
                                      [-23.9774694, -46.9020081],
                                      [-23.8054496, -46.1494446],
                                      [-23.2236790, -46.2648010]]
                              },
                              {
                              "country": "Brasil",
                              "city": "Belo Horizonte",
                              "gps": [[-19.6063689, -44.3188477],
                                      [-20.2544671, -44.3133545],
                                      [-20.2699268, -43.6761475],
                                      [-19.5882565, -43.6651611]]
                              },
                              {
                              "country": "Chile",
                              "city": "Santiago",
                              "gps": [[-33.2409847, -71.0101318],
                                      [-33.7152016, -71.0032654],
                                      [-33.7117746, -70.4278564],
                                      [-33.2340930, -70.4154968]]
                              },
                              {
                              "country": "Chile",
                              "city": "Valparaiso",
                              "gps": [[-32.9971465, -71.6754913],
                                      [-33.1352513, -71.6796112],
                                      [-33.1427258, -71.4708710],
                                      [-32.9320472, -71.4935303]]
                              },
                              {
                              "country": "Mexico",
                              "city": "Ciudad de Mexico",
                              "gps": [[19.5869627, -99.4111633],
                                      [19.0750972, -99.3836975],
                                      [19.0011013, -98.7657166],
                                      [19.7447317, -98.7890625]]
                              },
                              {
                              "country": "Mexico",
                              "city": "Guadalajara",
                              "gps": [[20.7657448, -103.5035706],
                                      [20.5318622, -103.5063171],
                                      [20.5312192, -103.0661774],
                                      [20.8395613, -103.1403351]]
                              },
                              {
                              "country": "Canada",
                              "city": "Montreal",
                              "gps": [[45.7176864, -74.1220093],
                                      [45.1781648, -73.9215088],
                                      [45.4813178, -72.8009033],
                                      [45.9683336, -73.2815552]]
                              },
                              {
                              "country": "Canada",
                              "city": "Toronto",
                              "gps": [[43.8503745, -80.1947021],
                                      [43.1049936, -79.6838379],
                                      [43.4289879, -78.3709717],
                                      [44.2963329, -79.1345215]]
                              },
                              {
                              "country": "USA",
                              "city": "Boston",
                              "gps": [[42.8518061, -71.7077637],
                                      [41.8859210, -71.7297363],
                                      [42.0166518, -69.8071289],
                                      [42.9966123, -70.0598145]]
                              },
                              {
                              "country": "USA",
                              "city": "New York City",
                              "gps": [[40.9467137, -74.7674561],
                                      [40.2124407, -74.0917969],
                                      [40.5597213, -73.1250000],
                                      [41.3603187, -73.6633301]]
                              },
                              {
                              "country": "USA",
                              "city": "Philadelphia",
                              "gps": [[40.0990841, -75.6298828],
                                      [39.5040407, -75.4376221],
                                      [39.6818260, -74.4543457],
                                      [40.4678455, -74.8992920]]
                              },
                              {
                              "country": "USA",
                              "city": "Washington DC",
                              "gps": [[39.0383863, -77.5277710],
                                      [38.5116391, -77.4618530],
                                      [38.5374243, -76.5087891],
                                      [39.2620314, -76.8026733]]
                              },
                              {
                              "country": "USA",
                              "city": "Atlanta",
                              "gps": [[33.9274087, -84.6194458],
                                      [33.5436839, -84.6194458],
                                      [33.4933073, -84.0042114],
                                      [33.9866411, -83.9520264]]
                              },
                              {
                              "country": "USA",
                              "city": "Chicago",
                              "gps": [[42.1022982, -88.2723999],
                                      [41.3190756, -88.1103516],
                                      [41.4262532, -86.8139648],
                                      [42.2691795, -87.0556641]]
                              },
                              {
                              "country": "USA",
                              "city": "Minneapolis",
                              "gps": [[45.2903466, -93.8616943],
                                      [44.5865551, -93.8836670],
                                      [44.6100235, -92.6916504],
                                      [45.3984500, -92.5653076]]
                              },
                              {
                              "country": "USA",
                              "city": "Denver",
                              "gps": [[39.9918515, -105.4357910],
                                      [39.2832939, -105.4550171],
                                      [39.2620314, -104.3591309],
                                      [40.1263910, -104.3646240]]
                              },
                              {
                              "country": "USA",
                              "city": "Houston",
                              "gps": [[30.0358110, -95.8721924],
                                      [29.3295093, -95.8227539],
                                      [29.4156755, -94.6856689],
                                      [30.2448319, -94.6252441]]
                              },
                              {
                              "country": "USA",
                              "city": "Los Angeles",
                              "gps": [[34.6603224, -119.2016602],
                                      [33.4681080, -119.2785645],
                                      [33.1283512, -116.6418457],
                                      [35.0479867, -116.3232422]]
                              },
                              {
                              "country": "USA",
                              "city": "San Francisco",
                              "gps": [[38.1172717, -123.1896973],
                                      [37.1252863, -123.2171631],
                                      [37.1121458, -121.6021729],
                                      [38.2122881, -121.2890625]]
                              },
                              {
                              "country": "USA",
                              "city": "Portland",
                              "gps": [[45.6793202, -123.0633545],
                                      [45.3135290, -123.0029297],
                                      [45.3289787, -122.1350098],
                                      [45.8019992, -122.2778320]]
                              },
                              {
                              "country": "USA",
                              "city": "Seattle",
                              "gps": [[47.8426576, -122.7392578],
                                      [47.3685943, -122.5195313],
                                      [47.3537106, -121.8933105],
                                      [47.7319345, -121.5856934]]
                              }
                            ]
                          },
                          {"continent": "Africa",
                           "gps": [[35.9068493, -5.8831787],
                                   [35.9335406, -5.5192566],
                                   [35.9235324, -5.1718140],
                                   [35.4338199, -2.2302246],
                                   [36.5626000, 0.8679199],
                                   [37.0727105, 4.2846680],
                                   [37.2128315, 7.8881836],
                                   [37.4050738, 9.4372559],
                                   [37.3788879, 10.9533691],
                                   [36.8268747, 12.1948242],
                                   [36.2265501, 11.5905762],
                                   [34.5337124, 11.4916992],
                                   [33.0178760, 14.5019531],
                                   [31.2034050, 18.6657715],
                                   [32.1849111, 19.5666504],
                                   [32.8703602, 21.0827637],
                                   [33.3121678, 22.7197266],
                                   [31.9987594, 26.4221191],
                                   [32.2871326, 32.3876953],
                                   [31.4052239, 32.4261475],
                                   [31.2515522, 32.3574829],
                                   [30.3693207, 32.3616028],
                                   [29.9204231, 32.4948120],
                                   [29.5674850, 32.5497437],
                                   [28.1640325, 33.4259033],
                                   [16.7203851, 40.4296875],
                                   [14.1365757, 42.1655273],
                                   [12.8974892, 43.1982422],
                                   [12.1897038, 43.7255859],
                                   [11.8458470, 44.2749023],
                                   [11.7490587, 48.0322266],
                                   [13.1971645, 52.0751953],
                                   [6.0094592, 53.7890625],
                                   [-4.9158328, 47.6367188],
                                   [-14.4346802, 62.4023438],
                                   [-34.0162419, 44.8242188],
                                   [-36.8796206, 14.4140625],
                                   [2.9869274, 2.4609375],
                                   [3.3379540, -15.4687500],
                                   [23.8858377, -21.7968750],
                                   [34.8859309, -9.2285156]],
                           "cities":[
                              {
                              "country": "Sudafrica",
                              "city": "Johannesburg",
                              "gps": [[-25.8938204, 27.3834229],
                                      [-26.6032629, 27.5646973],
                                      [-26.4754902, 28.5534668],
                                      [-25.6811373, 28.4930420]]
                              },
                              {
                              "country": "Sudafrica",
                              "city": "Cape Town",
                              "gps": [[-33.8247936, 17.6220703],
                                      [-34.5020298, 18.1384277],
                                      [-34.3116812, 19.2810059],
                                      [-33.3351177, 18.9349365]]
                              },
                              {
                              "country": "Botsuana",
                              "city": "Gaborone",
                              "gps": [[-24.4996456, 25.5981445],
                                      [-24.8939109, 25.6860352],
                                      [-24.8914195, 26.1337280],
                                      [-24.2845233, 26.1886597]]
                              }
                            ]
                          },
                          {"continent": "Oceania",
                           "gps": [[4.3025911, 137.5488281],
                                   [0.7909905, 129.1113281],
                                   [-11.0921659, 127.9687500],
                                   [-21.3712444, 105.2050781],
                                   [-48.5747899, 116.7187500],
                                   [-49.8379825, 175.5175781],
                                   [-22.0245456, 188.6132813],
                                   [-16.6361919, 203.5546875],
                                   [11.6952727, 185.7128906],
                                   [12.0393206, 146.6015625]],
                           "cities":[
                              {
                              "country": "Australia",
                              "city": "Melbourne",
                              "gps": [[-37.4050738, 144.1845703],
                                      [-38.6855098, 144.3713379],
                                      [-38.5911138, 147.0080566],
                                      [-37.0113259, 146.2500000]]
                              },
                              {
                              "country": "Australia",
                              "city": "Sydney",
                              "gps": [[-33.6237680, 150.5126953],
                                      [-34.2844533, 150.9576416],
                                      [-34.0526594, 151.8365479],
                                      [-33.2662499, 151.5399170]]
                              }
                            ]
                          },
                          {"continent": "Asia",
                           "gps": [[42.1471145, 28.0151367],
                                   [42.0411340, 27.5976563],
                                   [42.1715463, 27.2021484],
                                   [41.8777415, 26.1914063],
                                   [41.5743613, 26.2353516],
                                   [41.3850519, 26.3452148],
                                   [41.0710691, 26.1254883],
                                   [40.7139558, 25.9057617],
                                   [40.1956591, 25.4663086],
                                   [37.1953306, 26.5429688],
                                   [35.7821707, 27.5537109],
                                   [35.2097216, 29.0258789],
                                   [34.4884478, 31.0473633],
                                   [33.5963190, 32.3876953],
                                   [34.0344526, 34.3432617],
                                   [32.8426736, 34.5410156],
                                   [31.7281671, 33.5302734],
                                   [31.2597700, 32.7062988],
                                   [29.7071393, 32.6184082],
                                   [28.9600887, 33.0029297],
                                   [28.6086370, 33.1951904],
                                   [28.2753583, 33.4368896],
                                   [27.8342186, 33.9147949],
                                   [27.5813291, 34.4476318],
                                   [27.7175732, 35.0244141],
                                   [26.8534794, 35.7659912],
                                   [25.2049412, 36.9085693],
                                   [24.1467536, 37.4304199],
                                   [23.6948347, 38.2818604],
                                   [22.5734383, 38.9465332],
                                   [21.8614987, 38.7817383],
                                   [21.5655020, 39.0234375],
                                   [21.2484222, 38.9959717],
                                   [20.1590983, 39.7595215],
                                   [19.8235578, 40.4626465],
                                   [18.7867173, 41.0449219],
                                   [16.6309286, 41.5997314],
                                   [16.1513685, 42.7423096],
                                   [15.8926593, 42.6599121],
                                   [15.3000811, 42.4731445],
                                   [15.0190750, 42.7642822],
                                   [14.7217607, 42.8741455],
                                   [14.4240404, 42.8411865],
                                   [13.7900714, 43.1927490],
                                   [13.5712416, 43.2037354],
                                   [13.3468650, 43.1707764],
                                   [13.1918164, 43.1982422],
                                   [12.9684273, 43.3740234],
                                   [12.8184967, 43.4660339],
                                   [12.7086695, 43.4385681],
                                   [12.6644573, 43.4646606],
                                   [12.6631174, 43.5374451],
                                   [12.6952727, 43.6019897],
                                   [12.6966124, 43.6418152],
                                   [12.5116654, 44.1870117],
                                   [12.6617775, 44.6923828],
                                   [13.0580747, 46.2744141],
                                   [14.9872395, 52.1630859],
                                   [18.0205277, 64.4677734],
                                   [13.9234039, 72.1142578],
                                   [6.9700494, 76.7285156],
                                   [4.2149431, 80.1562500],
                                   [5.0909442, 83.4960938],
                                   [1.9332268, 93.5156250],
                                   [-7.0136679, 102.4804688],
                                   [-8.7547947, 109.1601563],
                                   [-10.1419317, 116.7187500],
                                   [-10.9196178, 121.4648438],
                                   [-10.1419317, 124.7167969],
                                   [-9.1888701, 126.6503906],
                                   [-7.9721977, 127.4414063],
                                   [-6.2716181, 127.2216797],
                                   [-4.3902289, 126.0351563],
                                   [-2.9430409, 125.1562500],
                                   [-0.9228117, 124.3652344],
                                   [0.4833927, 124.9804688],
                                   [5.7471741, 127.0458984],
                                   [10.0986701, 128.8916016],
                                   [22.4313402, 126.3867188],
                                   [30.2970179, 148.1835938],
                                   [42.5530803, 152.0507813],
                                   [56.6562265, 168.2226563],
                                   [63.5485522, 181.9335938],
                                   [63.4701447, 185.6250000],
                                   [64.3018221, 187.9541016],
                                   [64.8115573, 187.9101563],
                                   [65.4034448, 188.3056641],
                                   [65.3485138, 189.2285156],
                                   [65.8252819, 189.8657227],
                                   [65.9912118, 190.4699707],
                                   [66.3286848, 190.4919434],
                                   [68.0075710, 186.5039063],
                                   [70.0655847, 180.4394531],
                                   [71.7739410, 185.8886719],
                                   [72.9711890, 179.1210938],
                                   [73.4284236, 168.5742188],
                                   [80.7606147, 119.8828125],
                                   [82.4948236, 86.4843750],
                                   [78.4201933, 80.5078125],
                                   [75.0503536, 75.5859375],
                                   [74.0437226, 73.9160156],
                                   [73.0738435, 65.9179688],
                                   [70.4367988, 65.6542969],
                                   [68.4960402, 66.5332031],
                                   [67.4749224, 67.1484375],
                                   [66.4782081, 65.1269531],
                                   [65.5493667, 63.1933594],
                                   [64.4727938, 61.5234375],
                                   [62.5528570, 60.0292969],
                                   [61.2702328, 60.2929688],
                                   [58.4936938, 59.9414063],
                                   [57.6571576, 59.1503906],
                                   [57.2671636, 58.6450195],
                                   [56.9449742, 58.3374023],
                                   [56.7768083, 58.1176758],
                                   [56.5352577, 57.9638672],
                                   [56.3165367, 58.0517578],
                                   [56.3043486, 59.2382813],
                                   [56.1455495, 59.6337891],
                                   [55.6899717, 59.8974609],
                                   [55.3166430, 59.8315430],
                                   [55.0532026, 58.9965820],
                                   [54.8639629, 58.0297852],
                                   [55.1160845, 57.4804688],
                                   [54.7626704, 57.4584961],
                                   [54.6229781, 57.9858398],
                                   [54.7246202, 58.7548828],
                                   [54.9776137, 59.6777344],
                                   [54.7246202, 60.1171875],
                                   [54.0980602, 59.9194336],
                                   [53.7487108, 59.1064453],
                                   [53.0676266, 59.1064453],
                                   [52.2412561, 58.9746094],
                                   [51.7270282, 58.7548828],
                                   [51.5087425, 57.9199219],
                                   [51.5907226, 56.9970703],
                                   [51.2068834, 55.0634766],
                                   [51.4540069, 53.4375000],
                                   [51.9984104, 51.8994141],
                                   [51.8357775, 50.9326172],
                                   [51.3992057, 50.0976563],
                                   [50.8753111, 48.6474609],
                                   [50.5134265, 47.2412109],
                                   [49.5822260, 46.3623047],
                                   [48.5747899, 46.3623047],
                                   [48.1221010, 46.4721680],
                                   [47.4875130, 47.3510742],
                                   [47.2046424, 47.9882813],
                                   [46.4983923, 48.4277344],
                                   [45.8594121, 49.4824219],
                                   [46.4378569, 50.9326172],
                                   [46.1037088, 52.1411133],
                                   [45.3058026, 50.6909180],
                                   [44.6530242, 49.6582031],
                                   [44.0560117, 50.0097656],
                                   [43.3890819, 50.7568359],
                                   [41.9676592, 51.9653320],
                                   [41.1124688, 49.8999023],
                                   [41.9839943, 48.6474609],
                                   [41.9022770, 48.2958984],
                                   [41.2757423, 47.6614380],
                                   [41.7549222, 46.9308472],
                                   [41.8756964, 46.7852783],
                                   [42.0880318, 46.0739136],
                                   [42.2610492, 46.0107422],
                                   [42.3910086, 45.8898926],
                                   [42.6582018, 45.5273438],
                                   [42.7147322, 45.3955078],
                                   [42.7712111, 44.4287109],
                                   [42.7712111, 44.0112305],
                                   [42.8316672, 43.7750244],
                                   [42.9322960, 43.4289551],
                                   [43.0929607, 43.0883789],
                                   [43.1971673, 42.8247070],
                                   [43.2852033, 42.5280762],
                                   [43.3411601, 42.2424316],
                                   [43.3411601, 41.8798828],
                                   [43.3331694, 41.7370605],
                                   [43.4688676, 41.3305664],
                                   [43.6042619, 40.6823730],
                                   [43.6201706, 40.3308105],
                                   [43.6201706, 40.0012207],
                                   [43.4768404, 39.7595215],
                                   [43.3091911, 39.8254395],
                                   [43.1811471, 40.0836182],
                                   [42.5692644, 40.9020996],
                                   [42.0574502, 41.0998535],
                                   [41.7876970, 41.1108398],
                                   [41.3314513, 40.4626465],
                                   [41.3397004, 38.7652588],
                                   [41.2860624, 37.5732422],
                                   [41.7344294, 36.4141846],
                                   [42.1063737, 35.2496338],
                                   [42.2488517, 34.4201660],
                                   [42.1430416, 33.7280273],
                                   [41.7999833, 31.8603516],
                                   [41.4386085, 30.5914307],
                                   [41.4756602, 29.6905518],
                                   [41.5291420, 28.4820557],
                                   [41.8327351, 28.1854248],
                                   [42.0859935, 28.0755615]],
                           "cities":[
                              {
                              "country": "Israel",
                              "city": "Tel Aviv",
                              "gps": [[32.1337572, 34.2718506],
                                      [31.3864683, 35.4309082],
                                      [32.4680606, 36.3043213],
                                      [33.2019242, 34.9145508]]
                              },
                              {
                              "country": "Singapore",
                              "city": "Singapore",
                              "gps": [[1.4335662, 103.2495117],
                                      [1.0765968, 103.4857178],
                                      [1.3621763, 104.3536377],
                                      [1.8728354, 104.2987061]]
                              },
                              {
                              "country": "Tailandia",
                              "city": "Bangkok",
                              "gps": [[14.0779732, 100.0250244],
                                      [13.3254849, 100.1184082],
                                      [13.4109940, 101.0797119],
                                      [14.2723687, 101.0165405]]
                              },
                              {
                              "country": "China",
                              "city": "Hong Kong",
                              "gps": [[22.4084894, 114.0161133],
                                      [22.1378037, 114.1053772],
                                      [22.2687640, 114.4871521],
                                      [22.5353906, 114.3951416]]
                              },
                              {
                              "country": "China",
                              "city": "Tai Pei",
                              "gps": [[25.1340958, 121.2794495],
                                      [24.8378418, 121.3385010],
                                      [24.9287855, 121.7820740],
                                      [25.3092698, 121.7559814]]
                              },
                              {
                              "country": "Japon",
                              "city": "Tokyo",
                              "gps": [[35.7910828, 139.2297363],
                                      [35.1199086, 139.3066406],
                                      [35.3532161, 140.6854248],
                                      [36.2797072, 140.2734375]]
                              },
                              {
                              "country": "Japon",
                              "city": "Kyoto",
                              "gps": [[35.0805842, 135.5836487],
                                      [34.8126758, 135.5671692],
                                      [34.7822276, 135.8912659],
                                      [35.1277712, 136.0450745]]
                              }
                            ]
                          },
                          {"continent": "Europa",
                           "gps": [[39.5040407, -10.6567383],
                                   [36.6331621, -8.6352539],
                                   [36.3682219, -6.8554688],
                                   [36.2708502, -6.2567139],
                                   [36.1023764, -5.8996582],
                                   [36.0513196, -5.7307434],
                                   [36.0357739, -5.6607056],
                                   [35.9880075, -5.6044006],
                                   [36.0513196, -5.3942871],
                                   [36.1611617, -5.2432251],
                                   [36.5670121, -3.6639404],
                                   [36.5449494, -2.2851563],
                                   [37.0025527, -1.2963867],
                                   [37.7012074, -0.0659180],
                                   [38.1863868, 0.8129883],
                                   [38.6683561, 2.1313477],
                                   [40.0780714, 5.6469727],
                                   [40.3130432, 7.4267578],
                                   [39.9434365, 7.6025391],
                                   [38.8225910, 8.1738281],
                                   [38.6855098, 9.3603516],
                                   [39.0277188, 10.6347656],
                                   [38.8568201, 12.2167969],
                                   [37.7533440, 12.0410156],
                                   [37.1603165, 13.1835938],
                                   [36.4566360, 15.6005859],
                                   [37.1252863, 16.5673828],
                                   [37.8921955, 17.8857422],
                                   [38.4449847, 19.1601563],
                                   [36.2088231, 21.5771484],
                                   [35.0659731, 23.2470703],
                                   [34.7777158, 25.4443359],
                                   [34.6332079, 26.9384766],
                                   [35.6929946, 26.6857910],
                                   [36.7476877, 25.7849121],
                                   [38.6340365, 24.7741699],
                                   [40.0528476, 24.3017578],
                                   [40.8138092, 25.2246094],
                                   [41.9349765, 25.8837891],
                                   [42.4720969, 28.1909180],
                                   [43.1009829, 28.2128906],
                                   [43.7869584, 29.1137695],
                                   [44.7779359, 30.0585938],
                                   [45.2748864, 31.7724609],
                                   [45.0580014, 32.7832031],
                                   [44.2451990, 33.3984375],
                                   [44.1822040, 34.8925781],
                                   [44.4337798, 35.8593750],
                                   [44.3081267, 37.9687500],
                                   [43.7075935, 38.9794922],
                                   [43.7591926, 39.8419189],
                                   [43.8266013, 40.5560303],
                                   [43.6360752, 41.8908691],
                                   [43.2732059, 43.7585449],
                                   [42.9805395, 45.5987549],
                                   [42.3585439, 48.5046387],
                                   [44.1506812, 48.8671875],
                                   [46.2254529, 49.7021484],
                                   [51.7814356, 51.6796875],
                                   [52.9618751, 53.5253906],
                                   [52.4024189, 56.8212891],
                                   [53.8006508, 58.0957031],
                                   [54.8513153, 56.5576172],
                                   [55.7518494, 57.4804688],
                                   [56.9689362, 56.3818359],
                                   [60.7591595, 56.9091797],
                                   [64.8115573, 58.4912109],
                                   [67.1528982, 64.4018555],
                                   [68.2082910, 64.5117188],
                                   [69.7713557, 63.3251953],
                                   [71.6912927, 58.7548828],
                                   [73.1504399, 58.0957031],
                                   [74.8219342, 61.3037109],
                                   [75.8344180, 66.1816406],
                                   [76.4449073, 69.8730469],
                                   [77.2059116, 69.6533203],
                                   [77.3318092, 67.7636719],
                                   [76.9900458, 62.7978516],
                                   [75.2642388, 48.8671875],
                                   [68.0733047, 0.1757813],
                                   [61.2702328, -11.9531250],
                                   [50.8475730, -15.2929688],
                                   [42.1634034, -12.3046875]],
                           "cities":[
                              {
                              "country": "Rusia",
                              "city": "Moscow",
                              "gps": [[56.4382037, 35.2770996],
                                      [54.8639629, 36.2658691],
                                      [55.2290231, 39.1113281],
                                      [57.1123850, 38.6718750]]
                              },
                              {
                              "country": "Portugal",
                              "city": "Lisboa",
                              "gps": [[39.0789081, -9.7338867],
                                      [38.2640630, -9.7778320],
                                      [38.2468088, -8.3386230],
                                      [39.2832939, -8.5144043]]
                              },
                              {
                              "country": "España",
                              "city": "Madrid",
                              "gps": [[40.5972706, -4.2462158],
                                      [40.0528476, -4.2187500],
                                      [40.0612566, -3.2739258],
                                      [40.7930188, -2.8564453]]
                              },
                              {
                              "country": "España",
                              "city": "Barcelona",
                              "gps": [[41.5065205, 1.7962646],
                                      [41.1476380, 1.9638062],
                                      [41.2282490, 2.6477051],
                                      [41.7200806, 2.4746704]]
                              },
                              {
                              "country": "Italia",
                              "city": "Roma",
                              "gps": [[42.0023662, 12.2854614],
                                      [41.5846340, 12.1920776],
                                      [41.5907969, 12.7249146],
                                      [42.0900701, 12.8512573]]
                              },
                              {
                              "country": "Italia",
                              "city": "Milan",
                              "gps": [[45.9052999, 8.4045410],
                                      [45.1123001, 8.4924316],
                                      [45.0967915, 10.0744629],
                                      [46.2786312, 10.4589844]]
                              },
                              {
                              "country": "Francia",
                              "city": "Paris",
                              "gps": [[49.2821402, 0.6811523],
                                      [48.1221010, 1.4941406],
                                      [47.9016135, 4.1088867],
                                      [49.4681241, 4.3286133]]
                              },
                              {
                              "country": "Inglaterra",
                              "city": "Londres",
                              "gps": [[51.8357775, -0.6921387],
                                      [51.2825347, -0.7360840],
                                      [51.1965577, 0.3680420],
                                      [51.7542401, 0.8129883]]
                              },
                              {
                              "country": "Escocia",
                              "city": "Glasgow",
                              "gps": [[56.0474996, -4.6032715],
                                      [55.6496986, -4.5483398],
                                      [55.6372986, -3.6529541],
                                      [56.1944809, -3.8342285]]
                              },
                              {
                              "country": "Irlanda",
                              "city": "Dublin",
                              "gps": [[53.5141845, -6.5588379],
                                      [53.2027424, -6.5533447],
                                      [53.1764117, -5.6854248],
                                      [53.6055441, -5.7128906]]
                              },
                              {
                              "country": "Netherland",
                              "city": "Amsterdam",
                              "gps": [[52.5429551, 4.3835449],
                                      [52.0997569, 4.5812988],
                                      [52.2345283, 5.9545898],
                                      [52.9353967, 5.5480957]]
                              },
                              {
                              "country": "Germany",
                              "city": "Berlin",
                              "gps": [[52.6897024, 12.9418945],
                                      [52.2748801, 13.0627441],
                                      [52.2883226, 13.8537598],
                                      [52.8027614, 13.9965820]]
                              },
                              {
                              "country": "Germany",
                              "city": "Munich",
                              "gps": [[48.2831929, 11.0577393],
                                      [47.8758286, 11.1456299],
                                      [48.0266722, 12.0025635],
                                      [48.5166043, 11.8103027]]
                              },
                              {
                              "country": "Croacia",
                              "city": "Zagreb",
                              "gps": [[45.9626062, 15.5621338],
                                      [45.5717550, 15.7598877],
                                      [45.6562879, 16.4959717],
                                      [46.0998999, 16.4135742]]
                              },
                              {
                              "country": "Republica Checa",
                              "city": "Prague",
                              "gps": [[50.1768981, 14.0652466],
                                      [49.9971467, 14.0625000],
                                      [49.8769378, 14.7463989],
                                      [50.2278809, 14.9523926]]
                              },
                              {
                              "country": "Eslovaquia",
                              "city": "Bratislava",
                              "gps": [[48.1880635, 16.8914795],
                                      [47.9696977, 16.9244385],
                                      [48.0358557, 17.4517822],
                                      [48.3945616, 17.3199463]]
                              },
                              {
                              "country": "Rumania",
                              "city": "Bucarest",
                              "gps": [[44.6764656, 25.7409668],
                                      [44.2845367, 25.7958984],
                                      [44.2766713, 26.7297363],
                                      [44.7389299, 26.5869141]]
                              },
                              {
                              "country": "Dinamarca",
                              "city": "Copenhague",
                              "gps": [[55.7394817, 12.1618652],
                                      [55.5472807, 12.2277832],
                                      [55.5348482, 12.8485107],
                                      [55.8968763, 12.9913330]]
                              },
                              {
                              "country": "Polonia",
                              "city": "Varsovia",
                              "gps": [[52.4225230, 20.6542969],
                                      [52.0119365, 20.7421875],
                                      [52.0051740, 21.9396973],
                                      [52.6830428, 21.7749023]]
                              },
                              {
                              "country": "Ucrania",
                              "city": "Kiev",
                              "gps": [[50.6459773, 30.0750732],
                                      [50.0606654, 30.1519775],
                                      [50.1698617, 30.9979248],
                                      [50.7781553, 31.2341309]]
                              },
                              {
                              "country": "Finlandia",
                              "city": "Helsinki",
                              "gps": [[60.3622807, 24.4940186],
                                      [60.0785436, 24.5928955],
                                      [60.0620991, 25.2795410],
                                      [60.4084276, 25.3674316]]
                              },
                              {
                              "country": "Suecia",
                              "city": "Estocolmo",
                              "gps": [[59.4045592, 17.7456665],
                                      [59.2504369, 17.7923584],
                                      [59.2546495, 18.5641479],
                                      [59.5022735, 18.6080933]]
                              }
                            ]
                          }
                        ]

# verifi dir
def verifyDir(dir_path):
  if not os.path.exists(dir_path):
    os.makedirs(dir_path)

# Get number of wins, draws, and losses for each image in a specific position (right or left) and get the id of wins and losses images against
def get_WDL_Info(result, value_to_search, position, category):
  row = result[(result[position+'_id']==value_to_search) & (result['category']==category)]
  #print(row)
  if len(row) == 0:
    return [], 0, 0, 0, [], []
  else:
    wins = row[row['winner']==position]
    draws = row[row['winner']=="equal"]
    losses = row[(row['winner']!="equal") & (row['winner']!=position)]
    return row, len(wins), len(draws), len(losses), wins, losses

# Get all ids of W, L, wins, draws and losses from images in each category
def getSummaryScores(result, value_to_search, category):
  row_l, w_l, d_l, l_l, wins_l, losses_l = get_WDL_Info(result, value_to_search, "left", category)
  row_r, w_r, d_r, l_r, wins_r, losses_r = get_WDL_Info(result, value_to_search, "right", category)
  
  # verificando len y obteniendo Lat, Lon
  if len(row_l) != 0:
    lat = list(dict.fromkeys(row_l['left_lat'].values))[0]
    lon = list(dict.fromkeys(row_l['left_long'].values))[0]
  elif len(row_r) != 0:
    lat = list(dict.fromkeys(row_r['right_lat'].values))[0]
    lon = list(dict.fromkeys(row_r['right_long'].values))[0]
  else:
    return []
  
  # Id de las images a las que vencio
  wins_id = []
  # Id de las images con las que perdio
  losses_id = []
  if len(wins_r)!=0:
    aux = list(dict.fromkeys(wins_r['left_id'].values))
    wins_id = wins_id + aux
  if len(losses_r)!=0:
    aux = list(dict.fromkeys(losses_r['left_id'].values))
    losses_id = losses_id + aux
    
  if len(wins_l)!=0:
    aux = list(dict.fromkeys(wins_l['right_id'].values))
    wins_id = wins_id + aux
  if len(losses_l)!=0:
    aux = list(dict.fromkeys(losses_l['right_id'].values))
    losses_id = losses_id + aux
  
  w = w_l + w_r
  d = d_l + d_r
  l = l_l + l_r
  
  total = w + d + l
  if total == 0:
    return []
  
  W = w*1.0 / (total)
  L = l*1.0 / (total)
  
  return [W, L, w, d, l, lat, lon, wins_id, losses_id]

# Calculate QScore per category
def calculateQscore(result, value_to_search, wins_id, losses_id):
  W_, L_ = 0.0, 0.0
  if len(wins_id) != 0:
    for w_id in wins_id:
      w, _, _, _ = getInfoScore(result, w_id)
      W_ = W_ + w
  if len(losses_id) != 0:
    for l_id in losses_id:
      _, l, _, _ = getInfoScore(result, l_id)
      L_ = L_ = l

  W, _, wins, losses = getInfoScore(result, value_to_search)
  q = W + 1.0
  if wins!=0:
    q = q + 1.0/wins * W_
  if losses!=0:
    q = q - 1.0/losses * L_
  Q = 10.0/3*(q)
  return Q

# Get info of each row
def getInfoScore(result, value_to_search):
  query = result[result["ID"]==value_to_search]
  #print(query)
  return query["W_ratio"].values[0], query["L_ratio"].values[0], query["wins"].values[0], query["losses"].values[0]

# GetInfoSummaryRow
def GetInfoSummaryRow(result, value_to_search):
  query = result[result["ID"]==value_to_search]
  return query

# Read placepulse_2.zip
def read_zip_file(filepath):
  data = zipfile.ZipFile(filepath)
  return data

## PART 0: get information
def preprocess_data(data, filename):
  result = pandas.read_csv(data.open(filename))
  #print(result)

  # ids images
  left_ids = list(dict.fromkeys(result['left_id'].values))
  right_ids = list(dict.fromkeys(result['right_id'].values))
  total_ids = left_ids + right_ids
  img_ids = list(dict.fromkeys(total_ids))

  # just to verify that an image does not compare with itself
  row_equals = result[result['left_id'] == result['right_id']]
  if len(row_equals)>0:
    print(row_equals)

  # Categories
  metrics = list(dict.fromkeys(result['category'].values))
  print(metrics)

  print("Number of Images: {} to evaluate from a total of: {} comparisons in {} perception categories.".format(len(img_ids), len(result), len(metrics)))
  
  return result, img_ids, metrics

## PART 1: Preprocess Lat, Lon, W, L, wins, draws, and losses for each image
def preprocess_summary(data, filename, save_file=False):
  print("Preparing files to summarize all wins, losses, and draw for all images per category ...")
  
  result, img_ids, metrics = preprocess_data(data, filename)

  for category in metrics:
    print("Category {}:".format(category))
    
    IDs = []
    W = []
    L = []
    w = []
    d = []
    l = []
    lat = []
    lon = []

    for value_to_search in img_ids:
      imgPreData = getSummaryScores(result, value_to_search, category)
      if len(imgPreData) == 0:
        continue
      [W_, L_, w_, d_, l_, lat_, lon_, wins_id, losses_id] = imgPreData
      
      IDs.append(value_to_search)
      W.append(W_)
      L.append(L_)
      w.append(w_)
      d.append(d_)
      l.append(l_)
      lat.append(lat_)
      lon.append(lon_)
      print("- Image-ID: {}, Wp: {:.3f}, Lp: {:.3f}, Wins: {}, Draws: {}, Losses: {}".format(value_to_search, W_, L_, w_, d_, l_))
      
    data = {"ID": IDs,
            "Lat": lat,
            "Lon": lon,
            "W_ratio": W,
            "L_ratio": L,
            "wins": w,
            "draws": d,
            "losses": l,
    }
    
    scores = pandas.DataFrame(data, columns= ['ID', 'Lat', 'Lon', 'W_ratio', "L_ratio", "wins", "draws", "losses"])
    
    if save_file:
      scores.to_csv(summary_dir+"/"+"summary_scores_"+category+".csv", index=False)

    print("Done")

  return

## PART 2: Constructing real ponderated scores for each image in each caegory
def preprocess_Qscores(data, filename, save_file=False):
  print("Preparing files to calculate Qscore per category for all images ...")
  
  result, img_ids, metrics = preprocess_data(data, filename)
  
  for category in metrics:
    summary = pandas.read_csv(summary_dir+"/"+"summary_scores_"+category+".csv")
    print("Category {} with {} images".format(category, len(summary)))
    
    Qscores = []
    
    for value_to_search in img_ids:
      imgPreData = getSummaryScores(result, value_to_search, category)
      if len(imgPreData) == 0:
        continue
      [W_, L_, w_, d_, l_, lat_, lon_, wins_id, losses_id] = imgPreData
      
      Q = calculateQscore(summary, value_to_search, wins_id, losses_id)
      Qscores.append(Q)
      print("- Image-ID: {}, QScore {:.3f}".format(value_to_search, Q))
    
    summary['Q'] = Qscores
    
    if save_file:
      summary.to_csv(summary_dir+"/"+"summary_scores_"+category+".csv", index=False)
      
    print("Done")
    
  return

## PART 3: Summarize all categories in all images
def preprocess_images(data, filename, save_file=False):
  print("Preparing files to summarize image and Qscores in all categories ...")
  
  result, img_ids, metrics = preprocess_data(data, filename)
  
  IDs = []
  lat = []
  lon = []
  Qscores = {metric: [] for metric in metrics}
  lat_lon = False
  City = []
  Country = []
  Continent = []
  
  i = 0
  
  for value_to_search in img_ids:
  
    IDs.append(value_to_search)
  
    for category in metrics:
      summary = pandas.read_csv(summary_dir+"/"+"summary_scores_"+category+".csv")
      query = GetInfoSummaryRow(summary, value_to_search)
      
      if len(query)!=0:
        Qscores[category].append(query['Q'].values[0])
        if lat_lon == False:
          lat.append(query['Lat'].values[0])
          lon.append(query['Lon'].values[0])
          lat_lon = True
      else:
        Qscores[category].append(None)

    lat_lon = False
    
    #country, state, city = getIfoCity(value_to_search, lat, lon)

    for continent_obj in country_city_dataset:
      pol_cont = Polygon(continent_obj["gps"])
      inside_cont =  Point(lat[i], lon[i]).within(pol_cont)
      if inside_cont:
        for city_country in continent_obj['cities']:
          pol_count = Polygon(city_country["gps"])
          inside_count = Point(lat[i], lon[i]).within(pol_count)
          if inside_count:
            continent = continent_obj['continent']
            country = city_country["country"]
            city = city_country["city"]
            Continent.append(continent)
            Country.append(country)
            City.append(city)
            break
        break
    
    print("- Image-ID: {}, Lat: {:.6}, Lon: {:.6}, Continent: {}, Country: {}, City: {}, Qwealthy {}, Qdepressing {}, Qsafety {}, Qlively {}, Qboring {}, Qbeautiful {}".format(value_to_search, lat[i], lon[i], continent, country, city, Qscores['wealthy'][i], Qscores['depressing'][i], Qscores['safety'][i], Qscores['lively'][i], Qscores['boring'][i], Qscores['beautiful'][i]))
    
    i = i + 1
    
    print(len(IDs), len(lat), len(lon), [len(Qscores[category]) for category in metrics])

  data = {"Continent": Continent,
          "Country": Country,
          "City": City,
          "img_id": IDs,
          "ID": range(1,len(IDs)+1),
          "Lat": lat,
          "Lon": lon,
          "wealthy": Qscores['wealthy'],
          "depressing": Qscores['depressing'],
          "safety": Qscores['safety'],
          "lively": Qscores['lively'],
          "boring": Qscores['boring'],
          "beautiful": Qscores['beautiful'],
  }
  
  scores = pandas.DataFrame(data, columns= ["Continent", "Country", "City", 'ID', 'img_id', 'Lat', 'Lon', 'wealthy', 'depressing', 'safety', 'lively', 'boring', 'beautiful'])
  
  print(scores)
  
  if save_file:
    scores.to_csv(summary_dir+"/"+"summary_scores.csv", index=False)

  print("Done")

  return

def getIfoCity(value_to_search, lat, lon):
  info_position = geocoder.google([lat, lon], method='reverse', key='AIzaSyBSZXAK_Gc7S8O_Go_lNMOXF0PMtcQ-yB4')
  #info_position = geocoder.osm([lat, lon], method='reverse')
  g = info_position.json
  print("\n", g, "\n")
  
  try:
    country = g['raw']['country']['long_name']
  except:
    country = None
  try:
    state = g.json['state']
  except:
    state = None
  try:
    city = g['city']
  except:
    city = state
  
  print("- Image-ID: {}, Lat: {:.3}, Lon: {:.3}, Country: {}, State: {}, City: {}".format(value_to_search, lat, lon, country, state, city))
  
  return country, state, city

def preprocess_cities(save_file=False):
  print("Preparing files to summarize images per city with their respective Qscores in all categories ...")

  summary = pandas.read_csv(summary_dir+"/"+"summary_scores.csv")

  img_ids = summary["ID"].values
  lats = summary["Lat"].values
  lons = summary["Lon"].values
  City = []
  Country = []
  Continent = []

  for i, value_to_search in enumerate(img_ids):
    lat = lats[i]
    lon = lons[i]
    
    #country, state, city = getIfoCity(value_to_search, lat, lon)

    for continent_obj in country_city_dataset:
      pol_cont = Polygon(continent_obj["gps"])
      inside_cont =  Point(lat, lon).within(pol_cont)
      if inside_cont:
        for city_country in continent_obj['cities']:
          pol_count = Polygon(city_country["gps"])
          inside_count = Point(lat, lon).within(pol_count)
          if inside_count:
            continent = continent_obj['continent']
            country = city_country["country"]
            city = city_country["city"]
            Continent.append(continent)
            Country.append(country)
            City.append(city)
            print("- Image-ID: {}, Lat: {:.6}, Lon: {:.6}, Continent: {}, Country: {}, City: {}".format(value_to_search, lat, lon, continent, country, city))
            break
        break
    
  summary['Continent'] = Continent
  summary['Country'] = Country
  summary['City'] = City
  
  if save_file:
    summary.to_csv(summary_dir+"/"+"summary_scores.csv", index=False)

  return

# PART 4
def preprocess_pp2(save_file=False):
  result = pandas.read_csv(summary_dir+"/"+"summary_scores.csv")
  print(result)
  
  cities = list(dict.fromkeys(result['City'].values))
  print(cities)
  cols = list(result)
  metrics = [cols[7], cols[8], cols[9], cols[10], cols[11], cols[12]]
  numImg = []
  sigmas = {metric: [] for metric in metrics}
  means = {metric: [] for metric in metrics}
  print(metrics)
  
  for city in cities:
    query = result[result['City'].str.match(city)]
    query.drop(columns=["City"], inplace=True)
    print(query)
    
    num_img = len(query['ID'].values)
    numImg.append(num_img)
    
    for i, metric in enumerate(metrics):
      values = query[metric].values
      query.loc[:, metric] = pandas.to_numeric(values, errors='coerce')
      query[metric].fillna(query[metric].mean(), inplace=True)
      sigmas[metric].append(query[metric].std())
      means[metric].append(query[metric].mean())

    query.to_csv(scores_dir+"/"+city+".csv", index=False)
    
  #print(sigmas)
  #print(means)
  #print(numImg)
  
  data = {"city": cities,
          "numImages": numImg,
          "safety_mean": means['safety'],
          "safety_sigma": sigmas['safety'],
          "wealthy_mean": means['wealthy'],
          "wealthy_sigma": sigmas['wealthy'],
          "lively_mean": means['lively'],
          "lively_sigma": sigmas['lively'],
          "depressing_mean": means['depressing'],
          "depressing_sigma": sigmas['depressing'],
          "boring_mean": means['boring'],
          "boring_sigma": sigmas['boring'],
          "beautiful_mean": means['beautiful'],
          "beautiful_sigma": sigmas['beautiful'],
  }

  aggregate_statistics = pandas.DataFrame(data, columns= ['city', 'numImages', "safety_mean", "safety_sigma", "wealthy_mean", "wealthy_sigma", "lively_mean", "lively_sigma", "depressing_mean", "depressing_sigma", "boring_mean", "boring_sigma", "beautiful_mean", "beautiful_sigma"])

  if save_file:
    aggregate_statistics.to_csv(scores_dir+"/"+"aggregate_statistics.csv", index=False)
  
  plt.figure(figsize=(15,5))
  plt.legend(title="Num Images per city - Place Pulse 2.0")
  plt.bar(cities, numImg)
  plt.tick_params(axis="x", which='major', rotation=90, labelsize=10)
  plt.savefig(scores_dir+"/"+"cities_pp2.png", bbox_inches='tight', pad_inches = 0.5)
  plt.clf()
  plt.cla()
  plt.close()

def newRange(OldValues, OldMin, OldMax, NewMin=0, NewMax=10):
  NewValues = []
  OldRange = (OldMax - OldMin)
  for OldValue in OldValues:
    NewRange = NewMax - NewMin
    NewValue = (((OldValue - OldMin) * NewRange) / OldRange) + NewMin
    NewValues.append(NewValue)
  return numpy.array(NewValues)

# PART 5
def preprocess_statistics():
  summary = pandas.read_csv(scores_dir+"/"+"aggregate_statistics.csv")
  metrics = ["safety", "lively", "depressing", "beautiful", "boring", "wealthy"]

  city = summary['city'].values
  numImages = summary['numImages'].values

  for metric in metrics:
    scores = summary[metric+'_mean'].values

    range_val = 0.3

    metric_min = scores.min()
    metric_max = scores.max()

    xmin = metric_min - range_val
    xmax = metric_max + range_val

    # Preparing range for the lines behind of each circle
    distance = newRange(numImages, numImages.min(), numImages.max(), 1, 8)
    signs = numpy.resize([-1, 1], int(len(distance)))
    distance = numpy.multiply(distance, signs)

    levels = numpy.tile(distance, int(numpy.ceil(len(numImages)/len(distance))))[:len(numImages)]
    vert = numpy.array(['top', 'bottom'])[(levels > 0).astype(int)]

    # Preparing the main chart - scatter
    fig, ax = plt.subplots(figsize=[15,5])
    # Marker size in units of points^2
    volume = numpy.sqrt(numImages)*4
    ax.scatter(scores, numpy.zeros(len(scores)), s=volume, alpha=0.3, color="red")
    ax.plot([xmin + range_val, xmax - range_val], [0, 0], linewidth=1, markersize=12, color='black')

    # adding cities and lines
    for d, l, r, va in zip(scores, levels, city, vert):
      ax.annotate(r, xy=(d, l+numpy.sign(l)*0.5), va=va, ha="center", fontsize=8)
      ax.plot([d, d], [0, l], linewidth=1, markersize=12, color='gray')

    plt.text(xmin+0.1, 0, "Less "+metric, fontsize=10)
    plt.text(xmax-0.1, 0, "More "+metric, fontsize=10)

    #plt.xticks(numpy.arange(xmin, xmax, step=0.05))
    ax.axes.get_xaxis().set_visible(False)
    #plt.yticks(numpy.arange(-5, 5, step=0.5))
    ax.axes.get_yaxis().set_visible(False)

    ax.axes.set_xlim([xmin, xmax])
    ax.axes.set_ylim([10,-10])

    for spine in ["left", "top", "right", "bottom"]:
      ax.spines[spine].set_visible(False)

    ax.set_xlabel("Scores", fontsize=10)
    ax.set_ylabel("Names", fontsize=15)
    ax.set_title('Category: ' + metric)

    ax.grid(False)
    ax.margins(y=0.1)
    fig.tight_layout()
    #plt.show()
    plt.savefig(scores_dir+"/"+"pp2_"+metric+".png", bbox_inches='tight', pad_inches = 0.5)
    plt.clf()
    plt.cla()
    plt.close()

# PART 6
def preprocess_pairwisecomparisons(data, filename, save_file=False):
  
  result, img_ids, metrics = preprocess_data(data, filename)
  
  print("Number of pairwise comparisons per category:")
  total = 0
  for metric in metrics:
    row_equals = result[result['category'] == metric]
    print(metric, len(row_equals))
    total = total + len(row_equals)
  print("Total", total)
  
  print("\nAverage per category")
  summary = pandas.read_csv(summary_dir+"/"+"summary_scores.csv")
  metrics = ["safety", "lively", "depressing", "beautiful", "boring", "wealthy"]
  for metric in metrics:
    print(metric, summary[metric].mean())

  total_cities = 0
  total_imgs = 0
  print("\nNumber of cities and images per continent:")
  for continent in country_city_dataset:
    aux = summary[summary["Continent"] == continent["continent"]]
    print(continent["continent"], len(continent["cities"]), len(aux))
    total_cities = total_cities +  len(continent["cities"])
    total_imgs = total_imgs + len(aux)
  
  print("Total", total_cities, total_imgs)
  

if __name__ == '__main__':
  verifyDir(scores_dir)
  verifyDir(summary_dir)
  path = "placepulse_2.zip"
  filename = "placepulse_2.csv"
  data = read_zip_file(path)
  # PART 1
  #preprocess_summary(data, filename)
  # PART 2
  #preprocess_Qscores(data, filename)
  # PART 3
  #preprocess_images(data, filename)
  # PART 4
  #preprocess_pp2()
  # PART 5
  #preprocess_statistics()
  # PART 6
  preprocess_pairwisecomparisons(data, filename)
